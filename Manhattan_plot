## This code makes an easy to manipulate MHP. EG: can change colours, cex, axis, etc.


p.global=5.051372e-07

logglob<- -log10(p.global)

chr<-as.numeric(file[,6])
pos<-as.numeric(file[,7])
pvalue<-as.numeric(file[,2])


logp <- -log10(pvalue)

        #make sure we have an ordered factor
        if(!is.ordered(chr)) {
                chr <- ordered(chr)
        } else {
                chr <- chr[,drop=T]
        }
 
        #make sure positions are in kbp
        if (any(pos>1e6)) pos<-pos/1e6;
 
        #calculate absolute genomic position
        #from relative chromosomal positions
        posmin <- tapply(pos,chr, min);
        posmax <- tapply(pos,chr, max);
        posshift <- head(c(0,cumsum(posmax)),-1);
        names(posshift) <- levels(chr)
        genpos <- pos + posshift[chr];
        getGenPos<-function(cchr, cpos) {
                p<-posshift[as.character(cchr)]+cpos
                return(p)
        }
thin.logp.places=2
thin.pos.places=2
cex.use=0.8
        #reduce number of points plotted
        thinned <- unique(data.frame(
                logp=round(-log10(pvalue),thin.logp.places), 
                pos=round(genpos,thin.pos.places), 
                chr=chr, cex=cex.use, col=cex.use)
        )


        logp <- thinned$logp
        genpos <- thinned$pos
        chr <- thinned$chr
        grp <- thinned$grp
        CEX <- thinned$cex



### Now cex code: odd even chr dark light grey

        col.grp1<-intersect(which(chr %in% c(1,3,5,7,9,11,13,15,17,19,21)), which(logp<logglob))
        col.grp2<-intersect(which(!(chr %in% c(1,3,5,7,9,11,13,15,17,19,21))), which(logp<logglob))
        col.grp3<-intersect(which(chr %in% c(1,3,5,7,9,11,13,15,17,19,21)), which(logp>=logglob))
        col.grp4<-intersect(which(!(chr %in% c(1,3,5,7,9,11,13,15,17,19,21))), which(logp>=logglob))

        col<-CEX*0

        col[col.grp1]<-"orchid"
        col[col.grp2]<-"darkblue"
        col[col.grp3]<-"orchid"
        col[col.grp4]<-"darkblue"


get.locs<-function(C){

chr1<-which(thinned$chr==C)

posmis=min(thinned[chr1,2])
posmax=max(thinned[chr1,2])
posmin=min(thinned[chr1,2])
posmid=(posmin+posmax)/2

return(posmid)
}

padj<-(1:22*0)
padj[c(1,3,5,7,9,11,13,15,17,19,21)]<-3

plot(genpos, as.numeric(logp), pch=20, col=col, cex=CEX/2, ylab=expression(-log[10](p-value)), xaxt='n', bty='n', xlab="")
axis(1, at=do.call(c, lapply(1:22, get.locs)), labels=F, padj=padj, cex.axis=0.5)
